#!/data/data/com.termux/files/usr/bin/bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies ""
    _display_wait_box "2"
    input_files=$(_get_files "par_type=all")

    if ! _display_question_box "This action will rename the selected\nfiles and directories recursively.\n\nWould you like to continue?"; then
        _exit_script
    fi

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""

    # Rename files.
    local file=""
    find "$input_file" -type f ! -path "$IGNORE_FIND_PATH" \
        -print0 2>/dev/null | while read -r -d '' file; do
        local dir=""
        local filename=""
        local new_filename=""

        dir=$(dirname -- "$file")
        filename=$(basename -- "$file")

        # Transform to uppercase.
        new_filename=${filename^^}

        # Run the main process.
        _move_file "skip" "$file" "$dir/$new_filename"
    done

    # Rename directories.
    local dir=""
    find "$input_file" -type d ! -path "$IGNORE_FIND_PATH" \
        -print0 2>/dev/null |
        sort --reverse --zero-terminated | while read -r -d '' dir; do
        local parent_dir=""
        local dirname=""
        local new_dirname=""

        parent_dir=$(dirname -- "$dir")
        dirname=$(basename -- "$dir")

        # Transform to uppercase.
        new_dirname=${dirname^^}

        # Run the main process.
        _move_file "skip" "$dir" "$parent_dir/$new_dirname"
    done
}

_main "$@"
