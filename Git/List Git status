#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies "command=git"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=directory; par_get_pwd=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"

    local std_output=""
    std_output=$(_storage_text_read_all)

    _display_text_box "$std_output"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    # Check if the current directory is a Git repository.
    local top_level=""
    top_level=$(git -C "$input_file" rev-parse --show-toplevel 2>&1)
    _check_output "$?" "$top_level" "$input_file" "" || return 1

    _directory_push "$top_level" || return 1

    # Run the main process.
    std_output=$(git status --short --branch 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    _directory_pop || return 1

    # FORMAT THE OUTPUT:
    # Prepend the Git repository.
    std_output="Git repository: \"$top_level\""$'\n'"$std_output"

    _storage_text_write_ln "$std_output"$'\n'
}

_main "$@"
