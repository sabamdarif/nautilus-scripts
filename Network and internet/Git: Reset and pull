#!/data/data/com.termux/files/usr/bin/bash
# install_keyboard_shortcut=<Control><Shift>R

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies "command=git"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=directory")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"

    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    # Check if the current directory is a Git repository.
    local top_level=""
    top_level=$(git -C "$input_file" rev-parse --show-toplevel 2>&1)
    _check_output "$?" "$top_level" "$input_file" "" || return 1

    _directory_push "$top_level" || return 1

    # Clean the working tree by removing untracked files, ignored files, and
    # untracked directories.
    # -x: removes ignored files
    # -d: removes untracked folders
    # -f: removes untracked files
    std_output=$(git clean -xdf 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    # Fetch updates from the remote repository.
    # --all: Fetch all remotes.
    # --tags: Fetch all tags from the remote.
    # --prune: Before fetching, remove any remote-tracking references that no longer exist on the remote.
    # --prune-tags: Before fetching, remove any local tags that no longer exist on the remote.
    std_output=$(git fetch --all --tags --prune --prune-tags --force 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    # Get a list of all remote branches.
    local remote_branches=""
    remote_branches=$(git branch --remotes --no-color --format="%(refname:short)" 2>&1)
    _check_output "$?" "$remote_branches" "$input_file" "" || return 1
    remote_branches=$(printf "%s" "$remote_branches" |
        grep -v "^origin$" |
        grep -v "/HEAD" |
        sed "s|^origin/||")

    local branch=""
    for branch in $remote_branches; do
        # Reset the current branch to its latest state, discarding local
        # changes.
        # --hard: Resets the index and working tree.
        std_output=$(git reset --hard 2>&1)
        _check_output "$?" "$std_output" "$input_file" "" || return 1

        # Switch to the specified branch.
        std_output=$(git checkout "$branch" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "" || return 1

        # Pull the latest changes from the remote repository for the current
        # branch.
        std_output=$(git pull origin "$branch" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "" || return 1
    done

    local number_remote_branches=0
    number_remote_branches=$(wc -l <<<"$remote_branches")
    if ((number_remote_branches > 1)); then
        # Determine the default branch from the remote repository.
        branch=$(git remote show origin 2>&1)
        _check_output "$?" "$branch" "$input_file" "" || return 1
        branch=$(printf "%s" "$branch" | grep "HEAD branch" | sed "s|.*: ||")

        # Switch to the default branch.
        std_output=$(git checkout "$branch" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "" || return 1
    fi

    local skip_branches="desenv|develop|homolog|main|master|prod|ufrn"

    # Identify all branches merged into the current branch.
    local merged_branches=""
    std_output=$(git branch --format="%(refname:short)" 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1
    merged_branches=$(grep -vE "($skip_branches)" <<<"$std_output")

    # Delete local branches that no longer exist on the remote repository.
    for branch in $merged_branches; do
        if ! grep --quiet "$branch" <<<"$remote_branches"; then
            std_output=$(git branch --delete --force "$branch" 2>&1)
            _check_output "$?" "$std_output" "$input_file" "" || return 1
        fi
    done

    std_output=$(git reflog expire --expire=now --all 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    # git gc: Cleanup unnecessary files and optimize the local repository.
    # --prune: prune loose objects older than date.
    std_output=$(git gc --prune=all 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    _directory_pop || return 1
}

_main "$@"
