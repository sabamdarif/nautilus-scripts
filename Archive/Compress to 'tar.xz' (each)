#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Alt>X

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies "
        command=tar |
        command=xz; pkg_manager=apt; package=xz-utils |
        command=xz; pkg_manager=dnf |
        command=xz; pkg_manager=pacman |
        command=xz; pkg_manager=zypper"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=all; par_validate_conflict=true")
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""

    # Use the maximum compression.
    XZ_OPT="-9"
    export XZ_OPT

    # Run the main process.
    output_file=$(_get_output_filename "$input_file" "$output_dir" "par_extension_opt=replace; par_extension=tar.xz")
    if [[ -d "$input_file" ]]; then
        # Check if the directory is empty.
        if _is_directory_empty "$input_file"; then
            _log_error "The directory is empty." "$input_file" "" "$output_file"
            return 1
        fi

        # Change to the directory to perform compression.
        _directory_push "$input_file" || return 1

        std_output=$(find . -mindepth 1 -maxdepth 1 -print0 2>/dev/null |
            sed "s|\./||g" |
            xargs --no-run-if-empty --null tar -cJf "$output_file" --)
    else
        # If the input is a file, change to its parent directory.
        _directory_push "$(_get_filename_dir "$input_file")" || return 1

        # Extract the base name of the input file for compression.
        local input_file_basename=""
        input_file_basename=$(basename -- "$input_file")

        std_output=$(tar -cJf "$output_file" -- "$input_file_basename" 2>&1)
    fi
    _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
    _directory_pop || return 1
}

_main "$@"
