#!/data/data/com.termux/files/usr/bin/bash
# install_keyboard_shortcut=<Control>E

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "par_type=file")

    # Export variables to be used inside new shells (when using 'xargs').
    export TEMP_DIR_STORAGE_TEXT

    # Export functions to be used inside new shells (when using 'xargs').
    export -f \
        _all_commands_exists \
        _command_exists \
        _get_command \
        _get_dependencies \
        _storage_text_write \
        _storage_text_write_ln \
        _run_command

    # Check the dependencies for each file in parallel.
    printf "%s" "$input_files" | xargs \
        --no-run-if-empty \
        --delimiter="$FIELD_SEPARATOR" \
        --max-procs="$(_get_max_procs)" \
        --replace="{}" \
        bash -c "_get_dependencies '{}'"

    local dependencies+=""
    dependencies=$(_storage_text_read_all)

    _check_dependencies "$dependencies"
    _display_wait_box "2"

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2

    # Run the main process.
    local command=""
    command=$(_get_command "$input_file" "available")
    _run_command "$input_file" "$command" "$output_dir"
}

_get_dependencies() {
    local input_file=$1
    local dependencies=""

    local command=""
    command=$(_get_command "$input_file" "available")

    # If there is an available command, skip the dependency.
    if [[ -n "$command" ]]; then
        return
    fi

    command=$(_get_command "$input_file" "default")

    case $command in
    "7za")
        dependencies+="
            command=7za; pkg_manager=apt; package=p7zip |
            command=7za; pkg_manager=dnf; package=p7zip |
            command=7za; pkg_manager=pacman; package=p7zip |
            command=7za; pkg_manager=zypper; package=7zip"
        ;;
    "ar") dependencies+="command=ar; package=binutils" ;;
    "bsdtar")
        dependencies+="
                command=bsdtar; pkg_manager=apt; package=libarchive-tools |
                command=bsdtar; pkg_manager=dnf |
                command=bsdtar; pkg_manager=pacman; package=libarchive |
                command=bsdtar; pkg_manager=zypper"
        ;;
    "bsdtar+unar+7za")
        dependencies+="
                command=bsdtar; pkg_manager=apt; package=libarchive-tools |
                command=bsdtar; pkg_manager=dnf |
                command=bsdtar; pkg_manager=pacman; package=libarchive |
                command=bsdtar; pkg_manager=zypper"
        dependencies+=$'\n'
        dependencies+="
                command=unar; pkg_manager=apt |
                command=unar; pkg_manager=dnf |
                command=unar; pkg_manager=pacman; package=unarchiver |
                command=unar; pkg_manager=zypper"
        dependencies+=$'\n'
        dependencies+="
                command=7za; pkg_manager=apt; package=p7zip |
                command=7za; pkg_manager=dnf; package=p7zip |
                command=7za; pkg_manager=pacman; package=p7zip |
                command=7za; pkg_manager=zypper; package=7zip"
        ;;
    "bzip2") dependencies+="command=bzip2" ;;
    "cabextract") dependencies+="command=cabextract" ;;
    "cpio") dependencies+="command=cpio" ;;
    "gpg")
        dependencies+="
                command=gpg; pkg_manager=apt; package=gnupg |
                command=gpg; pkg_manager=dnf; package=gnupg2 |
                command=gpg; pkg_manager=pacman; package=gnupg |
                command=gpg; pkg_manager=zypper; package=gpg2"
        ;;
    "gzip") dependencies+="command=gzip" ;;
    "lha") dependencies+="command=lha; package=lhasa" ;;
    "lrzip") dependencies+="command=lrzip" ;;
    "lz4") dependencies+="command=lz4" ;;
    "lzip") dependencies+="command=lzip" ;;
    "lzop") dependencies+="command=lzop" ;;
    "tar") dependencies+="command=tar" ;;
    "tar+bzip2") dependencies+="command=tar | command=bzip2" ;;
    "tar+gzip") dependencies+="command=tar | command=gzip" ;;
    "tar+lrzip") dependencies+="command=lrztar; package=lrzip" ;;
    "tar+lz4") dependencies+="command=tar | command=lz4" ;;
    "tar+lzip") dependencies+="command=tar | command=lzip" ;;
    "tar+lzop") dependencies+="command=tar | command=lzop" ;;
    "tar+xz")
        dependencies+="
                command=tar |
                command=xz; pkg_manager=apt; package=xz-utils |
                command=xz; pkg_manager=dnf |
                command=xz; pkg_manager=pacman |
                command=xz; pkg_manager=zypper"
        ;;
    "tar+zstd") dependencies+="command=tar | command=zstd" ;;
    "unar")
        dependencies+="
                command=unar; pkg_manager=apt |
                command=unar; pkg_manager=dnf |
                command=unar; pkg_manager=pacman; package=unarchiver |
                command=unar; pkg_manager=zypper"
        ;;
    "unrar") dependencies+="command=unrar" ;;
    "unsquashfs")
        dependencies+="
            command=unsquashfs; pkg_manager=apt; package=squashfs-tools |
            command=unsquashfs; pkg_manager=dnf; package=squashfs-tools |
            command=unsquashfs; pkg_manager=pacman; package=squashfs-tools |
            command=unsquashfs; pkg_manager=zypper; package=squashfs"
        ;;
    "unzip") dependencies+="command=unzip" ;;
    "xorriso") dependencies+="command=xorriso" ;;
    "xz")
        dependencies+="
                command=xz; pkg_manager=apt; package=xz-utils |
                command=xz; pkg_manager=dnf |
                command=xz; pkg_manager=pacman |
                command=xz; pkg_manager=zypper"
        ;;
    "zpaq") dependencies+="command=zpaq" ;;
    "zstd") dependencies+="command=zstd" ;;
    esac

    _storage_text_write_ln "$dependencies"
}

_get_command() {
    local input_file=$1
    local command_status=$2
    local pref_commands=()
    local command=""

    # Define the preferred commands for each type of archive.
    local _cmds_7z=("7za" "unar" "bsdtar")
    local _cmds_ace=("unar")
    local _cmds_alz=("unar")
    local _cmds_ar=("ar" "bsdtar")
    local _cmds_arc=("unar")
    local _cmds_arj=("unar")
    local _cmds_bz=("bzip2" "unar" "7za")
    local _cmds_cab=("cabextract" "bsdtar" "unar")
    local _cmds_cpio=("cpio" "unar" "bsdtar")
    local _cmds_deb=("ar")
    local _cmds_gpg=("gpg")
    local _cmds_gz=("gzip" "unar" "7za")
    local _cmds_iso=("xorriso" "bsdtar")
    local _cmds_lrz=("lrzip")
    local _cmds_lz=("lzip")
    local _cmds_lz4=("lz4")
    local _cmds_lzh=("lha" "unar")
    local _cmds_lzma=("xz" "unar")
    local _cmds_lzo=("lzop")
    local _cmds_msi=("unar")
    local _cmds_pak=("unar")
    local _cmds_rar=("unrar" "unar" "bsdtar")
    local _cmds_sit=("unar")
    local _cmds_sqsh=("unsquashfs")
    local _cmds_tar_bz=("tar+bzip2" "unar" "7za")
    local _cmds_tar_gz=("tar+gzip" "unar" "7za")
    local _cmds_tar_lrz=("tar+lrzip")
    local _cmds_tar_lz=("tar+lzip")
    local _cmds_tar_lz4=("tar+lz4")
    local _cmds_tar_lzma=("tar+lzma" "unar" "7za")
    local _cmds_tar_lzo=("tar+lzop")
    local _cmds_tar_xz=("tar+xz" "unar" "7za")
    local _cmds_tar_z=("tar+gzip" "unar" "7za")
    local _cmds_tar_zst=("tar+zstd")
    local _cmds_tar=("tar" "bsdtar" "unar" "7za")
    local _cmds_xar=("unar" "bsdtar")
    local _cmds_xz=("xz" "unar" "7za")
    local _cmds_z=("gzip" "unar")
    local _cmds_zip=("7za" "bsdtar" "unar" "unzip")
    local _cmds_zoo=("unar")
    local _cmds_zpaq=("zpaq")
    local _cmds_zstd=("zstd")
    local _cmds_unknown_file=("bsdtar+unar+7za")

    # Determine the preferred commands based on the filename extension.
    case "${input_file,,}" in
    *.tar.bz | *.tbz) pref_commands=("${_cmds_tar_bz[@]}") ;;
    *.tar.bz2 | *.tbz2 | *.tb2) pref_commands=("${_cmds_tar_bz[@]}") ;;
    *.tar.gz | *.tgz) pref_commands=("${_cmds_tar_gz[@]}") ;;
    *.tar.lrz | *.tlrz) pref_commands=("${_cmds_tar_lrz[@]}") ;;
    *.tar.lz) pref_commands=("${_cmds_tar_lz[@]}") ;;
    *.tar.lz4) pref_commands=("${_cmds_tar_lz4[@]}") ;;
    *.tar.lzma | *.tlz) pref_commands=("${_cmds_tar_lzma[@]}") ;;
    *.tar.lzo | *.tzo) pref_commands=("${_cmds_tar_lzo[@]}") ;;
    *.tar.xz | *.txz) pref_commands=("${_cmds_tar_xz[@]}") ;;
    *.tar.z | *.taz) pref_commands=("${_cmds_tar_z[@]}") ;;
    *.tar.zst | *.tzst) pref_commands=("${_cmds_tar_zst[@]}") ;;
    *.7z) pref_commands=("${_cmds_7z[@]}") ;;
    *.ace) pref_commands=("${_cmds_ace[@]}") ;;
    *.alz) pref_commands=("${_cmds_alz[@]}") ;;
    *.ar) pref_commands=("${_cmds_ar[@]}") ;;
    *.arc) pref_commands=("${_cmds_arc[@]}") ;;
    *.arj) pref_commands=("${_cmds_arj[@]}") ;;
    *.bz | *.bz2) pref_commands=("${_cmds_bz[@]}") ;;
    *.cab) pref_commands=("${_cmds_cab[@]}") ;;
    *.cpio) pref_commands=("${_cmds_cpio[@]}") ;;
    *.deb | *.udeb) pref_commands=("${_cmds_deb[@]}") ;;
    *.gpg | *.asc | *.pgp) pref_commands=("${_cmds_gpg[@]}") ;;
    *.gz) pref_commands=("${_cmds_gz[@]}") ;;
    *.iso) pref_commands=("${_cmds_iso[@]}") ;;
    *.lrz) pref_commands=("${_cmds_lrz[@]}") ;;
    *.lz) pref_commands=("${_cmds_lz[@]}") ;;
    *.lz4) pref_commands=("${_cmds_lz4[@]}") ;;
    *.lzh | *.lzs | *.lha) pref_commands=("${_cmds_lzh[@]}") ;;
    *.lzma) pref_commands=("${_cmds_lzma[@]}") ;;
    *.lzo) pref_commands=("${_cmds_lzo[@]}") ;;
    *.msi) pref_commands=("${_cmds_msi[@]}") ;;
    *.pak) pref_commands=("${_cmds_pak[@]}") ;;
    *.rar) pref_commands=("${_cmds_rar[@]}") ;;
    *.sit) pref_commands=("${_cmds_sit[@]}") ;;
    *.sqsh | *.squashfs | *.sfs) pref_commands=("${_cmds_sqsh[@]}") ;;
    *.tar | *.gtar | *.gem) pref_commands=("${_cmds_tar[@]}") ;;
    *.xar) pref_commands=("${_cmds_xar[@]}") ;;
    *.xz) pref_commands=("${_cmds_xz[@]}") ;;
    *.z) pref_commands=("${_cmds_z[@]}") ;;
    *.zip) pref_commands=("${_cmds_zip[@]}") ;;
    *.zoo) pref_commands=("${_cmds_zoo[@]}") ;;
    *.zpaq) pref_commands=("${_cmds_zpaq[@]}") ;;
    *.zst) pref_commands=("${_cmds_zstd[@]}") ;;
    *)
        # For unknown extension, determine the preferred commands based on the
        # MIME type.
        local file_mime=""
        file_mime=$(_get_file_mime "$input_file")

        # NOTE: See the file: /usr/share/mime/packages/freedesktop.org.xml
        case "${file_mime,,}" in
        "application/pgp-encrypted") pref_commands=("${_cmds_gpg[@]}") ;;
        "application/vnd.debian.binary-package") pref_commands=("${_cmds_deb[@]}") ;;
        "application/vnd.ms-cab-compressed") pref_commands=("${_cmds_cab[@]}") ;;
        "application/vnd.squashfs") pref_commands=("${_cmds_sqsh[@]}") ;;
        "application/x-7z-compressed") pref_commands=("${_cmds_7z[@]}") ;;
        "application/x-ace") pref_commands=("${_cmds_ace[@]}") ;;
        "application/x-alz") pref_commands=("${_cmds_alz[@]}") ;;
        "application/x-arc") pref_commands=("${_cmds_arc[@]}") ;;
        "application/x-archive") pref_commands=("${_cmds_ar[@]}") ;;
        "application/x-arj") pref_commands=("${_cmds_arj[@]}") ;;
        "application/x-bzip-compressed-tar") pref_commands=("${_cmds_tar_bz[@]}") ;;
        "application/x-bzip") pref_commands=("${_cmds_bz[@]}") ;;
        "application/x-bzip2" | "application/bzip2") pref_commands=("${_cmds_bz[@]}") ;;
        "application/x-compress") pref_commands=("${_cmds_z[@]}") ;;
        "application/x-compressed-tar") pref_commands=("${_cmds_tar_gz[@]}") ;;
        "application/x-cpio") pref_commands=("${_cmds_cpio[@]}") ;;
        "application/x-gzip" | "application/gzip") pref_commands=("${_cmds_gz[@]}") ;;
        "application/x-iso9660-image") pref_commands=("${_cmds_iso[@]}") ;;
        "application/x-lha" | "application/x-lzh-compressed") pref_commands=("${_cmds_lzh[@]}") ;;
        "application/x-lrzip-compressed-tar") pref_commands=("${_cmds_tar_lrz[@]}") ;;
        "application/x-lrzip") pref_commands=("${_cmds_lrz[@]}") ;;
        "application/x-lz4-compressed-tar") pref_commands=("${_cmds_tar_lz4[@]}") ;;
        "application/x-lz4") pref_commands=("${_cmds_lz4[@]}") ;;
        "application/x-lzip-compressed-tar") pref_commands=("${_cmds_tar_lz[@]}") ;;
        "application/x-lzip") pref_commands=("${_cmds_lz[@]}") ;;
        "application/x-lzma-compressed-tar") pref_commands=("${_cmds_tar_lzma[@]}") ;;
        "application/x-lzma") pref_commands=("${_cmds_lzma[@]}") ;;
        "application/x-lzop") pref_commands=("${_cmds_lzo[@]}") ;;
        "application/x-msi") pref_commands=("${_cmds_msi[@]}") ;;
        "application/x-pak") pref_commands=("${_cmds_pak[@]}") ;;
        "application/x-rar" | "application/x-rar-compressed" | "application/vnd.rar") pref_commands=("${_cmds_rar[@]}") ;;
        "application/x-sit" | "application/x-stuffit" | "application/stuffit") pref_commands=("${_cmds_sit[@]}") ;;
        "application/x-tar") pref_commands=("${_cmds_tar[@]}") ;;
        "application/x-tarz") pref_commands=("${_cmds_tar_z[@]}") ;;
        "application/x-tzo") pref_commands=("${_cmds_tar_lzo[@]}") ;;
        "application/x-xar") pref_commands=("${_cmds_xar[@]}") ;;
        "application/x-xz-compressed-tar") pref_commands=("${_cmds_tar_xz[@]}") ;;
        "application/x-xz") pref_commands=("${_cmds_xz[@]}") ;;
        "application/x-zip" | "application/x-zip-compressed" | "application/zip") pref_commands=("${_cmds_zip[@]}") ;;
        "application/x-zoo") pref_commands=("${_cmds_zoo[@]}") ;;
        "application/x-zstd-compressed-tar") pref_commands=("${_cmds_tar_zst[@]}") ;;
        "application/zstd") pref_commands=("${_cmds_zstd[@]}") ;;
        "application/octet-stream")
            # For generic binary files, try further identification.
            local file_information=""
            file_information=$(file --dereference --brief \
                -- "$input_file" 2>/dev/null)

            case "${file_information,,}" in
            "gpg "* | "pgp "*) pref_commands=("${_cmds_gpg[@]}") ;;
            *)
                # Default extractor chain for unknown binary files.
                pref_commands=("${_cmds_unknown_file[@]}")
                ;;
            esac
            ;;
        *)
            # Default extractor chain for unknown files.
            pref_commands=("${_cmds_unknown_file[@]}")
            ;;
        esac
        ;;
    esac

    # Determine the command to use based on the command status.
    if [[ "$command_status" == "default" ]]; then
        # Use the first preferred command as the default.
        command=${pref_commands[0]}
    elif [[ "$command_status" == "available" ]]; then
        # Find the first available command on the system.
        local pref_command=""
        for pref_command in "${pref_commands[@]}"; do
            if [[ "$pref_command" == *"+"* ]]; then
                # Check if all commands in a composite command exist.
                if _all_commands_exists "${pref_command//+/ }"; then
                    command=$pref_command
                    break
                fi
            elif _command_exists "$pref_command"; then
                # Use the first available command.
                command=$pref_command
                break
            fi
        done
    fi

    printf "%s" "$command"
}

_run_command() {
    local input_file=$1
    local command=$2
    local output_dir=$3
    local exit_code=0
    local filename=""
    local std_output=""

    if [[ -z "$output_dir" ]]; then
        output_dir=$(dirname -- "$input_file")
    fi

    # Try to use the command '7z' instead of '7za'.
    local command_7za="7za"
    if [[ "$command" == *"7za"* ]]; then
        _command_exists "7z" && command_7za="7z"
    fi

    filename=$(basename -- "$input_file")             # Remove the path.
    filename=$(_strip_filename_extension "$filename") # Remove the extension.

    __temp_dir_push() {
        temp_dir_output=$(_get_temp_dir_local "$output_dir" "$filename")
        _directory_push "$temp_dir_output" || return 1
    }
    __temp_dir_pop() {
        # Exit the temporary directory.
        _directory_pop || return 1
    }
    __temp_dir_remove() {
        rm -rf -- "$temp_dir_output" &>/dev/null
    }
    __get_password() {
        _display_password_box "Enter the password for the archive '$(basename -- "$input_file")'.\nPassword:"
    }

    # Use a local temporary directory to work.
    __temp_dir_push || return 1

    case "$command" in
    "7za")
        std_output=$($command_7za x -aoa -p"null" -- "$input_file" 2>&1)
        exit_code=$?

        if ((exit_code != 0)) && grep --quiet --ignore-case "wrong password" <<<"$std_output"; then
            local password=""
            __temp_dir_pop && __temp_dir_remove
            password=$(__get_password) || return 1
            __temp_dir_push || return 1
            std_output=$($command_7za x -aoa -p"$password" -- "$input_file" 2>&1)
            exit_code=$?
        fi
        ;;
    "ar") std_output=$(ar x -- "$input_file" 2>&1) ;;
    "bsdtar")
        std_output=$(bsdtar --passphrase "null" -xf "$input_file" 2>&1)
        exit_code=$?

        if ((exit_code != 0)) && grep --quiet --ignore-case "incorrect passphrase" <<<"$std_output"; then
            local password=""
            __temp_dir_pop && __temp_dir_remove
            password=$(__get_password) || return 1
            __temp_dir_push || return 1
            std_output=$(bsdtar --passphrase "$password" -xf "$input_file" 2>&1)
            exit_code=$?
        fi
        ;;
    "bzip2") bzip2 -d -c -k -- "$input_file" >"$filename" 2>/dev/null ;;
    "cabextract") std_output=$(cabextract "$input_file" 2>&1) ;;
    "cpio") std_output=$(cpio -idv <"$input_file" 2>&1) ;;
    "gpg") std_output=$(gpg --batch --yes --decrypt --output "$filename" -- "$input_file" 2>&1) ;;
    "gzip") gzip -d -c -k -- "$input_file" >"$filename" 2>/dev/null ;;
    "lha") std_output=$(lha -e "$input_file" 2>&1) ;;
    "lrzip") std_output=$(lrzip -d -o "$temp_dir_output/$filename" -- "$input_file" 2>&1) ;;
    "lz4") lz4 -d -c -- "$input_file" >"$filename" 2>/dev/null ;;
    "lzip") lzip -d -c -k -- "$input_file" >"$filename" 2>/dev/null ;;
    "lzop") std_output=$(lzop -d -- "$input_file" 2>&1) ;;
    "tar+bzip2") std_output=$(tar --extract --bzip2 --file="$input_file" 2>&1) ;;
    "tar+gzip") std_output=$(tar --extract --gzip --file="$input_file" 2>&1) ;;
    "tar+lrzip") std_output=$(lrztar -d "$input_file" 2>&1) ;;
    "tar+lzip") std_output=$(tar --extract --lzip --file="$input_file" 2>&1) ;;
    "tar+lz4") std_output=$(lz4 -d -c -- "$input_file" | tar xf -) ;;
    "tar+lzma") std_output=$(tar --extract --lzma --file="$input_file" 2>&1) ;;
    "tar+lzop") std_output=$(tar --extract --lzop --file="$input_file" 2>&1) ;;
    "tar+xz") std_output=$(tar --extract --xz --file="$input_file" 2>&1) ;;
    "tar+z") std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    "tar+zstd") std_output=$(zstd -f -d -c -- "$input_file" | tar xf -) ;;
    "tar") std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    "unar")
        std_output=$(unar -- "$input_file" 2>&1)
        exit_code=$?

        if ((exit_code != 0)) && grep --quiet --ignore-case "requires a password" <<<"$std_output"; then
            local password=""
            __temp_dir_pop && __temp_dir_remove
            password=$(__get_password) || return 1
            __temp_dir_push || return 1
            std_output=$(unar -force-overwrite -password "$password" -- "$input_file" 2>&1)
            exit_code=$?
        fi
        ;;
    "unrar")
        std_output=$(unrar x -p"null" -- "$input_file" 2>&1)
        exit_code=$?

        if ((exit_code != 0)) && grep --quiet --ignore-case "password" <<<"$std_output"; then
            local password=""
            __temp_dir_pop && __temp_dir_remove
            password=$(__get_password) || return 1
            __temp_dir_push || return 1
            std_output=$(unrar x -p"$password" -- "$input_file" 2>&1)
            exit_code=$?
        fi
        ;;
    "unsquashfs") std_output=$(unsquashfs "$input_file" 2>&1) ;;
    "unzip")
        std_output=$(unzip -P "null" -- "$input_file" 2>&1)
        exit_code=$?

        if ((exit_code != 0)) && grep --quiet --ignore-case "incorrect password" <<<"$std_output"; then
            local password=""
            __temp_dir_pop && __temp_dir_remove
            password=$(__get_password) || return 1
            __temp_dir_push || return 1
            std_output=$(unzip -P "$password" -- "$input_file" 2>&1)
            exit_code=$?
        fi
        ;;
    "xorriso") std_output=$(xorriso -osirrox on -indev "$input_file" -- -extract / . -rollback_end 2>&1) ;;
    "xz") xz -d -c -k -- "$input_file" >"$filename" 2>/dev/null ;;
    "zpaq") std_output=$(zpaq x "$input_file" 2>&1) ;;
    "zstd") zstd -d -c -- "$input_file" >"$filename" 2>/dev/null ;;
    "bsdtar+unar+7za")
        exit_code=1
        # Default extractor chain for unrecognized files.
        # Try to extract with 'bsdtar'.
        if ((exit_code != 0)); then
            std_output=$(bsdtar -xf "$input_file" 2>&1)
            exit_code=$?
        fi

        # Try to extract with 'unar'.
        if ((exit_code != 0)); then
            std_output=$(unar -- "$input_file" 2>&1)
            exit_code=$?
        fi

        # Try to extract with '7za'.
        if ((exit_code != 0)); then
            std_output=$($command_7za x -aoa -- "$input_file" 2>&1)
            exit_code=$?
        fi

        if ((exit_code != 0)); then
            std_output="Could not recognize the archive format."
        fi
        ;;
    esac

    # Check for result errors.
    local exit_code_last=$?
    if ((exit_code != 0)) || ((exit_code_last != 0)); then
        _check_output "1" "$std_output" "$input_file" ""

        # If all extracted files have zero bytes, then abort.
        local non_zero_files=""
        non_zero_files=$(find . -type f ! -size 0 2>/dev/null)
        if [[ -z "$non_zero_files" ]]; then
            __temp_dir_pop && __temp_dir_remove
            return 1
        fi
    fi

    # Fix permissions of extracted files in 'iso' archive format.
    if [[ "${input_file,,}" == *".iso" ]]; then
        chmod --recursive u+rw -- .
    fi

    # Get the list of root items (files or directories)
    # in the 'temp_dir_output' directory.
    local root_items=""
    root_items=$(find . -mindepth 1 -maxdepth 1 2>/dev/null)

    # Count the number of items (using word count to count lines,
    # similar to the original wc -l).
    local count_root_items=""
    count_root_items=$(wc -l <<<"$root_items")

    # Check if the 'temp_dir_output' has just one item.
    local single_root_item=""
    if ((count_root_items == 1)); then
        single_root_item="${root_items#./}"
    fi

    # Check if the 'temp_dir_output' is empty.
    if ((count_root_items == 0)); then
        __temp_dir_pop && __temp_dir_remove
        return 1
    fi

    __temp_dir_pop || return 1

    # Move the items to the correct directory.
    if [[ "$single_root_item" == "$filename" ]] ||
        [[ "$(_strip_filename_extension "$single_root_item")" == "$filename" ]]; then
        # For archives with "one item with the same name of the archive".
        # For example: 'README.txt.tar.gz' or 'README.tar.gz'.
        _move_file "rename" \
            "$temp_dir_output/$single_root_item" "$output_dir/$single_root_item"
    elif [[ "$single_root_item" == "squashfs-root" ]] &&
        [[ "$command" == "unsquashfs" ]]; then
        # For the 'squashfs' archive format.
        _move_file "rename" \
            "$temp_dir_output/$single_root_item" "$output_dir/$filename"
    else
        # For archives with "one item with a different name of the archive"
        # or "multiple items".
        _move_file "rename" \
            "$temp_dir_output" "$output_dir/$filename"
    fi

    __temp_dir_remove
}

_all_commands_exists() {
    local commands=$1

    local commands_array=()
    IFS=" " read -r -a commands_array <<<"$commands"

    local command=""
    for command in "${commands_array[@]}"; do
        if ! _command_exists "$command"; then
            return 1
        fi
    done
    return 0
}

_main "$@"
