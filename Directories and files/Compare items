#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Shift>C

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "par_type=all; par_min_items=2; par_max_items=3; par_sort_list=true")

    # Run the main process.
    _compare "$input_files"
}

_compare() {
    # This function compares files based on their MIME types and available
    # commands. It supports two or three files depending on the command and
    # file type.

    local input_files=$1      # Input files separated by '$FIELD_SEPARATOR'.
    local num_files_compare=2 # Default number of files to compare.

    local file_1="" # First file in the input.
    local file_2="" # Second file in the input.
    local file_3="" # Third file in the input, optional.

    # Extract individual file paths from the input string.
    file_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$input_files")
    file_2=$(cut -d "$FIELD_SEPARATOR" -f 2 <<<"$input_files")
    file_3=$(cut -d "$FIELD_SEPARATOR" -f 3 <<<"$input_files")

    # Perform a preliminary comparison to check if the files are identical.
    _compare_identical "$file_1" "$file_2" "$file_3"

    # Adjust the number of files to compare if a third file is provided.
    if [[ -n "$file_3" ]]; then
        num_files_compare=3
    fi

    # Determine the command to execute.
    local command=""
    command=$(_get_command "$file_1" "$num_files_compare")

    # Check dependencies required for the command.
    local dependencies=""
    dependencies=$(_get_dependencies "$command")
    _check_dependencies "$dependencies"

    # Execute the appropriate command based on the determined type.
    case $command in
    "compare")
        # Use ImageMagick's compare tool for image files.
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two images to compare!"
            _exit_script
        fi
        _compare_imagemagick "$file_1" "$file_2"
        ;;
    "diffpdf")
        # Use 'diffpdf' for comparing PDF files.
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two PDFs to compare!"
            _exit_script
        fi
        diffpdf -- "$file_1" "$file_2" &
        ;;
    "meld" | "kdiff3")
        # Use 'meld' or 'kdiff3' for general file or directory comparison.
        if ((num_files_compare == 2)); then
            $command -- "$file_1" "$file_2" &
        else
            $command -- "$file_1" "$file_2" "$file_3" &
        fi
        ;;
    *"_hex")
        # Use a hex comparison tool for binary files.
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two binary files to compare!"
            _exit_script
        fi
        _compare_hexa "$command" "$file_1" "$file_2" "$file_3"
        ;;
    esac
}

_compare_hexa() {
    # This function compares binary files in hexadecimal format and handle
    # modifications. It converts files to hex view, compares them, and allows
    # editing or saving changes.

    local command=$1 # Command to use for comparison (e.g., 'meld').
    local file_1=$2  # First binary file to compare.
    local file_2=$3  # Second binary file to compare.

    # Remove the '_hex' suffix from the command name.
    command=${command//_hex/}

    # Get the sizes of the two files to calculate differences.
    local file_1_size=""
    local file_2_size=""
    local size_difference=0
    file_1_size=$(_get_file_size "$file_1")
    file_2_size=$(_get_file_size "$file_2")
    size_difference=$(_get_difference "$file_1_size" "$file_2_size")

    # If the files have different sizes,
    # compute a column width for better comparison.
    local cols=24
    if ((size_difference != 0)); then
        cols=$(_get_hex_ideal_cols "$size_difference")
    fi

    # Convert the binary files into hexadecimal format for comparison.
    local file_1_hex=""
    local file_2_hex=""
    file_1_hex="$TEMP_DIR_TASK/$(basename -- "$file_1")"
    file_2_hex="$TEMP_DIR_TASK/$(basename -- "$file_2")"
    xxd -c "$cols" "$file_1" "$file_1_hex"
    xxd -c "$cols" "$file_2" "$file_2_hex"

    # Remove the address column from the hex dumps for cleaner comparison.
    sed -i "s|^[^:]*: ||g" "$file_1_hex"
    sed -i "s|^[^:]*: ||g" "$file_2_hex"

    # Use the specified comparison command to compare or edit the hex dumps.
    $command -- "$file_1_hex" "$file_2_hex"

    # Simplify the hex dumps for further processing (plain hex dump format).
    sed -i "s|  .*||g; s| ||g" "$file_1_hex"
    sed -i "s|  .*||g; s| ||g" "$file_2_hex"

    # Save the files after possible modifications.
    local file_1_modified="$file_1_hex.bin"
    local file_2_modified="$file_2_hex.bin"
    xxd -revert -p "$file_1_hex" "$file_1_modified"
    xxd -revert -p "$file_2_hex" "$file_2_modified"

    # Move the modified files to their original locations, replacing the
    # originals.
    _move_temp_file_to_output "$file_1" "$file_1_modified" "$file_1"
    _move_temp_file_to_output "$file_2" "$file_2_modified" "$file_2"
}

_compare_identical() {
    # This function checks if two or three specified items (files or
    # directories) are identical. If all selected items are identical, displays
    # a message and exits the script.

    local file_1=$1
    local file_2=$2
    local file_3=$3

    # Variables to store the results of the comparisons.
    local diff_1_2=""
    local diff_1_3=""

    # Compare the first and second items. Use 'diff' to check for differences.
    diff_1_2=$(diff --brief --recursive -- "$file_1" "$file_2" 2>&1)

    # If a third item is not provided, check if 'file_1' and 'file_2' are
    # identical.
    if [[ -z "$file_3" ]]; then
        if [[ -z "$diff_1_2" ]]; then
            _display_info_box "The two selected items are identical."
            _exit_script
        fi
    else
        # If a third item is provided, compare it with the first item.
        diff_1_3=$(diff --brief --recursive -- "$file_1" "$file_3" 2>&1)

        # Check if all three items are identical.
        if [[ -z "$diff_1_2" ]] && [[ -z "$diff_1_3" ]]; then
            _display_info_box "The three selected items are identical."
            _exit_script
        fi
    fi
}

_compare_imagemagick() {
    # This function compares two images using ImageMagick. If the images are
    # identical, it displays a message and exits the script. Otherwise, it
    # generates a visual diff and opens it with an image viewer.

    local file_1=$1
    local file_2=$2

    # Check if the two images have identical pixel values.
    if compare -metric AE -- "$file_1" "$file_2" null: &>/dev/null; then
        _display_info_box "The two selected images has same pixel values."
        _exit_script
    fi

    # Retrieve the dimensions of each image (width x height format).
    local dimensions_1=""
    local dimensions_2=""
    dimensions_1=$(identify -format "%wx%h" "$file_1" 2>&1)
    _check_output "$?" "$dimensions_1" "$file_1" "" || return 1
    dimensions_2=$(identify -format "%wx%h" "$file_2" 2>&1)
    _check_output "$?" "$dimensions_2" "$file_2" "" || return 1

    # Create a temporary file for the visual diff output.
    local temp_file=""
    temp_file="$(_get_temp_file_dry).png"

    # Compare the images based on their dimensions.
    if [[ "$dimensions_1" == "$dimensions_2" ]]; then
        # If dimensions are the same, use a grayscale diff for better clarity.
        convert \
            '(' "$file_1" -flatten -grayscale Rec709Luminance ')' \
            '(' "$file_2" -flatten -grayscale Rec709Luminance ')' \
            '(' -clone 0-1 -compose darken -composite ')' \
            -channel RGB -combine "$temp_file"
    else
        # If dimensions differ, generate a visual diff highlighting
        # differences.
        compare -- "$file_1" "$file_2" -compose src "$temp_file"
    fi

    # Determine the default image viewer to display the visual diff.
    local image_viewer=""
    image_viewer=$(_xdg_get_default_app "image/jpeg")

    # Open the visual diff with the default image viewer.
    if [[ "$image_viewer" == *"eog" ]]; then
        # If the viewer is Eye of GNOME (eog), ensure a new instance is opened.
        $image_viewer --new-instance -- "$temp_file"
    else
        $image_viewer -- "$temp_file"
    fi
}

_get_command() {
    # This function determines the appropriate command for comparing files or
    # directories. The selection is based on the file type, the number of files
    # to compare, and system availability of commands.

    local input_file=$1        # The file to analyze for MIME type or encoding.
    local num_files_compare=$2 # The number of files to compare (2 or 3).
    local command=""

    # Determine the MIME type of the input file.
    local file_mime=""
    file_mime=$(_get_file_mime "$input_file")

    # Select preferred commands based on the file MIME type.
    case $file_mime in
    "application/pdf") command="diffpdf" ;;
    "inode/directory") command="meld" ;;
    "inode/x-empty") command="meld" ;;
    "image/"*) command="compare" ;;
    "text/"*) command="meld" ;;
    *)
        # For unknown MIME types, determine the file encoding.
        local file_encoding=""
        file_encoding=$(_get_file_encoding "$input_file")
        if [[ "$file_encoding" == "binary" ]]; then
            # Binary file comparison.
            command="meld_hex"
        else
            # Default to text comparison.
            command="meld"
        fi
        ;;
    esac

    # Adjust the selected command for KDE or LXQt desktop environments.
    if [[ "$command" == "meld"* ]]; then
        case "${XDG_CURRENT_DESKTOP,,}" in
        *"kde"* | *"lxqt"*)
            command=${command//meld/kdiff3}
            ;;
        esac
    fi

    printf "%s" "$command"
}

_get_dependencies() {
    local command=$1
    local dependencies=""

    case $command in
    "compare") dependencies="
        command=compare; pkg_manager=apt; package=imagemagick |
        command=compare; pkg_manager=dnf; package=ImageMagick |
        command=compare; pkg_manager=pacman; package=imagemagick |
        command=compare; pkg_manager=zypper; package=ImageMagick |
        command=xdg-open; package=xdg-utils" ;;
    "diffpdf") dependencies="command=diffpdf" ;;
    "kdiff3") dependencies="command=kdiff3" ;;
    "kdiff3_hex") dependencies="command=kdiff3 | command=xxd" ;;
    "meld") dependencies="command=meld" ;;
    "meld_hex") dependencies="command=meld | command=xxd" ;;
    esac

    printf "%s" "$dependencies"
}

_get_hex_ideal_cols() {
    # This function determines the ideal number of columns for a hexadecimal
    # display. The column width is chosen to evenly divide the size difference
    # between files, ensuring a more organized and visually coherent hex dump.

    local size_difference=$1
    local cols=24 # Default column width for the hex display.

    # Iterate from 23 down to 5 to find the largest divisor of the size
    # difference. This ensures that the columns align neatly for better
    # readability.
    local i=0
    for ((i = 23; i >= 5; i--)); do
        if ((size_difference % i == 0)); then
            cols=$i
            break
        fi
    done

    printf "%s" "$cols"
}

_get_difference() {
    # This function calculates the absolute difference between two numbers. The
    # result is always a positive value, regardless of the order of the inputs.

    local num_1=$1
    local num_2=$2

    # Calculate the absolute difference by comparing the two numbers.
    if ((num_1 > num_2)); then
        printf "%s" "$((num_1 - num_2))"
    else
        printf "%s" "$((num_2 - num_1))"
    fi
}

_get_file_size() {
    # This function returns the size of a file in bytes.

    stat --format="%s" "$1" 2>/dev/null
}

_main "$@"
