#!/data/data/com.termux/files/usr/bin/bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies ""
    _display_wait_box "2"
    input_files=$(_get_files "par_type=directory; par_max_items=1")

    if ! _display_question_box "This action will move all files from subdirectories\nto the root of the selected directory.\n\nWould you like to continue?"; then
        _exit_script
    fi

    # Run the main process.
    _flatten_directory "$input_files"

    _display_result_box ""
}

_flatten_directory() {
    local directory=$1
    local undo_script=""
    local temp_file=""
    local filename=""
    local exit_code=0

    # Create a temporary file to store the list of files to move.
    temp_file=$(_get_temp_file)

    # Create an 'undo script' to reverse the flattening operation.
    undo_script=$(_make_undo_script "$directory")

    _directory_push "$directory" || return 1

    # Generate a list of all files (not directories) in the current directory and its subdirectories.
    find . -mindepth 2 -not -type d 2>/dev/null >>"$temp_file"

    # For each directory, add a command to the 'undo script' to recreate the directory structure.
    find . -type d 2>/dev/null | grep "/" | xargs -I{} printf "%s\n" "mkdir -p -- \"{}\"" >>"$undo_script"

    # Loop through each file in the list and move it to the root directory.
    while read -r full_path_filename; do
        # Get the file's name (basename) for moving it to the root directory.
        filename="./$(basename -- "$full_path_filename")"

        # Move the file to the root directory.
        _move_file "skip" "$full_path_filename" "$filename"
        exit_code=$?

        # If the file was moved successfully and the name was changed, add to the 'undo script'.
        if ((exit_code == 0)); then
            # Print 'mv' command in Undo script.
            printf "%s\n" "mv -n -- \"$filename\" \"$full_path_filename\"" >>"$undo_script"
        fi
    done <"$temp_file"

    # Remove any empty directories that remain after moving the files.
    find . -type d -empty -delete 2>/dev/null

    _directory_pop || return 1

    # Remove the temporary files.
    rm -f -- "$temp_file"
}

_make_undo_script() {
    local output_dir=$1
    local undo_script_name="undo-flatten.sh"

    # Generate a file name for the undo script.
    local output_file=""
    output_file=$(_get_output_filename "$undo_script_name" "$output_dir" "par_extension_opt=preserve")

    # Create the undo script with a header and usage instructions.
    {
        printf "%s\n" "#!/data/data/com.termux/files/usr/bin/bash"
        printf "\n"
        printf "%s\n" "# This script is automatically generated to reverse the directory flattening"
        printf "%s\n" "# process. It restores the original directory structure and moves files back to"
        printf "%s\n" "# their respective subdirectories."
        printf "%s\n" "#"
        printf "%s\n" "# Usage: Run this script in the root of the directory where the flattening was"
        printf "%s\n" "# performed."
        printf "%s\n" "#"
        printf "%s\n" "# Example: ./$undo_script_name"
        printf "%s\n" "#"
        printf "%s\n" "# Note: This script assumes no additional changes were made to the directory"
        printf "%s\n" "# structure after the flattening operation."
        printf "\n"
    } >"$output_file"

    # Make the 'undo script' executable.
    chmod +x -- "$output_file"

    # Return the path of the generated 'undo script'.
    printf "%s" "$output_file"
}

_main "$@"
