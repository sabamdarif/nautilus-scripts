#!/data/data/com.termux/files/usr/bin/bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies ""
    _display_wait_box "2"
    input_files=$(_get_files "par_type=file; par_max_items=1; par_select_mime=text/plain")

    # Export variables to be used inside new shells (when using 'xargs').
    export TEMP_DIR_STORAGE_TEXT

    # Export variables to be used inside new shells (when using 'xargs').
    export \
        FIELD_SEPARATOR

    # Export functions to be used inside new shells (when using 'xargs').
    export -f \
        _storage_text_write \
        _storage_text_write_ln \
        _verify_checksum

    # Escape single quotes in filenames to handle them correctly in 'xargs'
    # with 'bash -c'.
    checksum_file=$(sed -z "s|'|'\\\''|g" <"$input_files")

    printf "%s" "$checksum_file" | xargs \
        --no-run-if-empty \
        --delimiter=$'\n' \
        --max-procs="$(_get_max_procs)" \
        --replace="{}" \
        bash -c "_verify_checksum '{}'"

    local std_output=""
    std_output=$(_storage_text_read_all)
    std_output=$(_text_sort "$std_output")

    _display_list_box "$std_output" "par_columns='--column:Status,--column:File'; par_item_name=files; par_action=open_location; par_checkbox=true"
}

_verify_checksum() {
    local line=$1
    local saved_checksum=""
    local saved_file=""
    local current_output=""
    local current_checksum=""
    local status=""

    saved_checksum=$(printf "%s" "$line" | cut -d " " -f1)
    saved_file=$(printf "%s" "$line" | cut -d " " -f3-)

    # Replace % to %% with the 'printf' command.
    saved_file=${saved_file//%/%%}

    # Some checksums start with '\', for filenames with '\n' or '\'.
    # shellcheck disable=SC2059
    saved_file_decoded=$(printf "$saved_file")

    # If the file does not exist, report and skip the check.
    if [[ ! -e "$saved_file_decoded" ]]; then
        status="ðŸ”´ File not found"
        _storage_text_write_ln "$status$FIELD_SEPARATOR$saved_file"
        return 1
    fi

    current_output=$(sha1sum -- "$saved_file_decoded" 2>/dev/null)
    current_checksum=$(printf "%s" "$current_output" | cut -d " " -f1)

    # Compare the checksum.
    if [[ "$saved_checksum" != "$current_checksum" ]]; then
        status="ðŸ”´ Checksum mismatch"
        _storage_text_write_ln "$status$FIELD_SEPARATOR$saved_file"
        return 1
    fi

    status="ðŸŸ¢ Ok"
    _storage_text_write_ln "$status$FIELD_SEPARATOR$saved_file"
}

_main "$@"
